---
apiVersion: v1
kind: Namespace
metadata:
  name: "{{ postgres_cluster_namespace }}"
  labels:
    name: postgres

---
apiVersion: v1
kind: Secret
type: kubernetes.io/basic-auth
metadata:
  name: "{{ postgres_cluster_name}}-superuser-secret"
  namespace: "{{ postgres_cluster_namespace }}"
stringData:
  username: "postgres"
  password: "{{ postgres_superuser_pass }}"

---
apiVersion: v1
kind: Secret
type: kubernetes.io/basic-auth
metadata:
  name: "{{ postgres_cluster_name}}-secret"
  namespace: "{{ postgres_cluster_namespace }}"
stringData:
  username: "{{ postgres_cluster_user }}"
  password: "{{ postgres_cluster_pass }}"

---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: "{{ postgres_cluster_name}}-minio-secret"
  namespace: "{{ postgres_cluster_namespace }}"
stringData:
  minio_access_key: "{{ minio_access_key }}"
  minio_secret_key: "{{ minio_secret_key }}"

---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: "{{ postgres_cluster_name}}"
  namespace: "{{ postgres_cluster_namespace }}"
spec:
  instances: {{ postgres_instances }}

  superuserSecret:
    name: "{{ postgres_cluster_name}}-superuser-secret"

{% if minio_url != '' %}
  backup:
    retentionPolicy: "30d"
    barmanObjectStore:
      destinationPath: "s3://{{ postgres_cluster_name }}/"
      endpointURL: "{{ minio_url }}"
      s3Credentials:
        accessKeyId:
          name: "{{ postgres_cluster_name}}-minio-secret"
          key: minio_access_key
        secretAccessKey:
          name: "{{ postgres_cluster_name}}-minio-secret"
          key: minio_secret_key
{% endif %}

  bootstrap:
    initdb:
      database: "{{ postgres_cluster_db }}"
      owner: "{{ postgres_cluster_user }}"
      secret:
        name: "{{ postgres_cluster_name}}-secret"

  primaryUpdateStrategy: unsupervised
  storage:
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      storageClassName: longhorn
      volumeMode: Filesystem
      resources:
        requests:
          storage: 10Gi
---
# Expose rw replica outside cluster on port 30543
apiVersion: v1
kind: Service
metadata:
  name: "{{ postgres_cluster_name}}-exposed-service"
  namespace: "{{ postgres_cluster_namespace }}"
spec:
  type: NodePort
  selector:
    postgresql: "{{ postgres_cluster_name}}"
    role: primary
  ports:
    - nodePort: 30543
      protocol: TCP
      port: 5432
      targetPort: 5432

{% if minio_url != "" %}
---
apiVersion: postgresql.cnpg.io/v1
kind: ScheduledBackup
metadata:
  name: backup-example
  namespace: "{{ postgres_cluster_namespace }}"
spec:
  schedule: "0 0 0 * * *"
  backupOwnerReference: self
  cluster:
    name: "{{ postgres_cluster_name}}"
{% endif %}
